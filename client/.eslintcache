[{"/Users/cam/Desktop/Bootcamp/book-search/client/src/index.js":"1","/Users/cam/Desktop/Bootcamp/book-search/client/src/App.js":"2","/Users/cam/Desktop/Bootcamp/book-search/client/src/components/Navbar.js":"3","/Users/cam/Desktop/Bootcamp/book-search/client/src/pages/SavedBooks.js":"4","/Users/cam/Desktop/Bootcamp/book-search/client/src/pages/SearchBooks.js":"5","/Users/cam/Desktop/Bootcamp/book-search/client/src/components/SignupForm.js":"6","/Users/cam/Desktop/Bootcamp/book-search/client/src/components/LoginForm.js":"7","/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/auth.js":"8","/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/mutations.js":"9","/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/queries.js":"10","/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/localStorage.js":"11"},{"size":266,"mtime":1657040660433,"results":"12","hashOfConfig":"13"},{"size":1323,"mtime":1657049244805,"results":"14","hashOfConfig":"13"},{"size":2524,"mtime":1657040660433,"results":"15","hashOfConfig":"13"},{"size":2412,"mtime":1657048017733,"results":"16","hashOfConfig":"13"},{"size":4813,"mtime":1657046271371,"results":"17","hashOfConfig":"13"},{"size":3405,"mtime":1657048348737,"results":"18","hashOfConfig":"13"},{"size":2784,"mtime":1657049258676,"results":"19","hashOfConfig":"13"},{"size":1234,"mtime":1657040660433,"results":"20","hashOfConfig":"13"},{"size":1129,"mtime":1657045411730,"results":"21","hashOfConfig":"13"},{"size":338,"mtime":1657044750721,"results":"22","hashOfConfig":"13"},{"size":793,"mtime":1657040660433,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"17nj7tc",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/cam/Desktop/Bootcamp/book-search/client/src/index.js",[],["49","50"],"/Users/cam/Desktop/Bootcamp/book-search/client/src/App.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/components/Navbar.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/pages/SavedBooks.js",["51","52","53","54"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n// import { getMe, deleteBook } from '../utils/API';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId }\n      })\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/cam/Desktop/Bootcamp/book-search/client/src/pages/SearchBooks.js",["55","56"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\n// import { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchInput}`)\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave }}\n      })\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/cam/Desktop/Bootcamp/book-search/client/src/components/SignupForm.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/components/LoginForm.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/auth.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/mutations.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/queries.js",[],"/Users/cam/Desktop/Bootcamp/book-search/client/src/utils/localStorage.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"65","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"66","line":13,"column":24,"nodeType":"63","messageId":"64","endLine":13,"endColumn":29},{"ruleId":"61","severity":1,"message":"67","line":26,"column":15,"nodeType":"63","messageId":"64","endLine":26,"endColumn":19},{"ruleId":"61","severity":1,"message":"66","line":19,"column":22,"nodeType":"63","messageId":"64","endLine":19,"endColumn":27},{"ruleId":"61","severity":1,"message":"67","line":72,"column":15,"nodeType":"63","messageId":"64","endLine":72,"endColumn":19},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]